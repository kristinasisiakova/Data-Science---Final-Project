# -*- coding: utf-8 -*-
"""Final Project Home Page - DS4E

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MfhjjZqouiaXiHkhjZXL1iLCAIFk8fDj
"""

!pip install streamlit --quiet
!pip install pyngrok --quiet

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from PIL import Image
# import matplotlib.pyplot as plt
# import seaborn as sns
# import altair as alt
# import plotly.express as px
# st.set_option('deprecation.showPyplotGlobalUse', False)
# 
# 
# ### The first two lines of the code load an image and display it using the st.image function.
# image1 = Image.open('hotel.jpeg')
# image2 = Image.open('city.jpeg')
# img1 = Image.open("hotel.jpeg")
# img2 = Image.open("city.jpeg")
# width, height = img1.size
# img2 = img2.resize((width, height))
# st.image([img1, img2], width=350)
# 
# ### The st.title function sets the title of the web application to "Final Project - 01 Introduction Page".
# st.title("Hotel Cancellations")
# 
# st.sidebar.header("Dashboard")
# st.sidebar.markdown("---")
# app_mode = st.sidebar.selectbox('üîé Select Page',['Home'])
# 
# select_dataset =  st.sidebar.selectbox('üíæ Select Dataset',["Hotel Bookings"])
# df = pd.read_csv("df.csv")
# 
# st.info("The dataset contains data on bookings from two different hotels - a resort hotel and a city hotel - both located in Portugal.")
# st.info("This interactive website will show hotel cancellations according to certain variables, as listed below. Users will be able to see model accuracy, logstic regression, and KNN model. This website will be able to predict whether hotel bookings will be cancelled or not by looking at variables and such variables will also explain if travelers will stay in city or resort hotels.")
# 
# 
# st.markdown("### 00 - Description of the Dataset")
# head = st.radio('View the **top** (head) or the **bottom** (tail) of the dataset', ('Head', 'Tail'))
# num = st.number_input('Select the number of rows to view:', 5, 158)
# if head == 'Head':
#   st.dataframe(df.head(num))
# else:
#   st.dataframe(df.tail(num))
# 
# st.caption('Data Source - Nuno Antonio, Ana de Almeida, Luis Nunes, Hotel booking demand datasets, Data in Brief, Volume 22, 2019. https://doi.org/10.1016/j.dib.2018.11.126.')
# st.markdown("##### Size of the Dataset:")
# st.text('(Number of Hotel Bookings, Number of Variables)')
# st.write(df.shape)
# 
# st.markdown("##### Description of each variable:")
# st.markdown(" **Hotel**: Hotel (Resort Hotel or City Hotel)")
# st.markdown(" **is_canceled**: Value indicating if the booking was canceled (1) or not (0)")
# st.markdown("**lead_time**: Number of days that elapsed between the entering date of the booking into the PMS and the arrival date")
# st.markdown(" **arrival_date_year**: Year of arrival date")
# st.markdown(" **arrival_date_month**: Month of arrival date")
# st.markdown(" **arrival_date_week_number**: Week number of year for arrival date")
# st.markdown(" **arrival_date_day_of_month**: Day of arrival date")
# st.markdown(" **stays_in_weekend_nights**: Number of weekend nights (Saturday or Sunday) the guest stayed or booked to stay at the hotel")
# st.markdown(" **stays_in_week_nights**: Number of week nights (Monday to Friday) the guest stayed or booked to stay at the hotel")
# st.markdown(" **adults**: Number of adults")
# st.markdown(" **children**: Number of children")
# st.markdown(" **babies**: Number of babies")
# st.markdown(" **meal**: Type of meal booked. Categories are presented in standard hospitality meal packages:\n- Undefined/SC ‚Äì no meal package\n- BB ‚Äì Bed & Breakfast\n- HB ‚Äì Half board (breakfast and one other meal ‚Äì usually dinner)\n- FB ‚Äì Full board (breakfast, lunch and dinner")
# st.markdown(" **country**: Country of origin. Categories are represented in the ISO 3155‚Äì3:2013 format")
# st.markdown(" **market_segment**: Market segment designation. In categories, the term ‚ÄúTA‚Äù means ‚ÄúTravel Agents‚Äù and ‚ÄúTO‚Äù means ‚ÄúTour Operators‚Äù")
# st.markdown(" **distribution_channel**: Booking distribution channel. The term ‚ÄúTA‚Äù means ‚ÄúTravel Agents‚Äù and ‚ÄúTO‚Äù means ‚ÄúTour Operators‚Äù")
# st.markdown(" **is_repeated_guest**: Value indicating if the booking name was from a repeated guest (1) or not (0)")
# st.markdown(" **previous_cancellations**: Number of previous bookings that were cancelled by the customer prior to the current booking")
# st.markdown(" **previous_bookings_not_canceled**: Number of previous bookings not cancelled by the customer prior to the current booking")
# st.markdown(" **reserved_room_type**: Code of room type reserved. Code is presented instead of designation for anonymity reasons.")
# st.markdown(" **assigned_room_type**: Code for the type of room assigned to the booking. Sometimes the assigned room type differs from the reserved room type due to hotel operation reasons (e.g. overbooking) or by customer request. Code is presented instead of designation for anonymity reasons.")
# st.markdown(" **booking_changes**: Number of changes/amendments made to the booking from the moment the booking was entered on the PMS until the moment of check-in or cancellation")
# st.markdown(" **deposit_type**: Indication on if the customer made a deposit to guarantee the booking. This variable can assume three categories:\n- No Deposit ‚Äì no deposit was made\n- Non Refund * a deposit was made in the value of the total stay cost\n- Refundable ‚Äì a deposit was made with a value under the total cost of stay.")
# st.markdown(" **agent**: ID of the travel agency that made the booking")
# st.markdown(" **company**: ID of the company/entity that made the booking or responsible for paying the booking. ID is presented instead of designation for anonymity reasons")
# st.markdown(" **days_in_waiting_list**: Number of days the booking was in the waiting list before it was confirmed to the customer")
# st.markdown(" **customer_type**: Type of booking, assuming one of four categories:\n- Contract - when the booking has an allotment or other type of contract associated to it\n- Group ‚Äì when the booking is associated to a group\n- Transient ‚Äì when the booking is not part of a group or contract, and is not associated to other transient booking\n- Transient-party ‚Äì when the booking is transient, but is associated to at least other transient booking")
# st.markdown(" **adr**: Average Daily Rate as defined by dividing the sum of all lodging transactions by the total number of staying nights")
# st.markdown(" **required_car_parking_spaces**: Number of car parking spaces required by the customer")
# st.markdown(" **total_of_special_requests**: Number of special requests made by the customer (e.g. twin bed or high floor)")
# st.markdown(" **reservation_status**: Reservation last status, assuming one of three categories:\n- Canceled ‚Äì booking was canceled by the customer\n- Check-Out ‚Äì customer has checked in but already departed\n- No-Show ‚Äì customer did not check-in and did inform the hotel of the reason why")
# st.markdown(" **reservation_status_date**: Date at which the last status was set. This variable can be used in conjunction with the ReservationStatus to understand when was the booking canceled or when did the customer checked-out of the hotel")
# 
# hotel_counts = df['hotel'].value_counts()
# fig = px.pie(values=hotel_counts.values, names=hotel_counts.index,
#              hole=0.6, color_discrete_sequence=px.colors.qualitative.Pastel1)
# 
# fig.update_layout(title="Proportion of Guests in Resort vs. City Hotels")
# 
# st.plotly_chart(fig)
# 
# counts = df.groupby(['hotel', 'is_canceled']).size().reset_index(name='count')
# counts['status'] = counts['is_canceled'].map({0: 'Booked', 1: 'Canceled'})
# fig = px.pie(counts, values='count', names='status',
#              hole=0.6, color='is_canceled',
#              color_discrete_sequence=px.colors.qualitative.Pastel1,
#              labels={'is_canceled': 'Status', 'count': 'Count'})
# fig.update_layout(title="Proportion of Canceled and Booked Reservations")
# st.plotly_chart(fig)
# 
# hotels_data = pd.read_csv("df.csv")
# fig1, ax = plt.subplots()
# sns.boxplot(x="hotel", y="adr", data=hotels_data, ax=ax, palette="Accent")
# ax.set_title("Average Daily Rate by Hotel Type")
# ax.set_xlabel("Hotel Type")
# ax.set_ylabel("Average Daily Rate")
# st.pyplot(fig1)
# 
# hotels_data = pd.read_csv("df.csv")
# fig2, ax = plt.subplots()
# sns.boxplot(x="hotel", y="stays_in_week_nights", data=hotels_data, ax=ax, palette="Accent")
# ax.set_title("Number of Week Nights Stayed by Hotel Type")
# ax.set_xlabel("Hotel Type")
# ax.set_ylabel("Number of Week Nights")
# st.pyplot(fig2)
# 
# st.markdown("### 01 - Descriptive Statistics")
# st.dataframe(df.describe())
# 
# st.markdown("### 02 - Missing Values")
# dfnull = df.isnull().sum()/len(df)*100
# avgmiss = dfnull.sum().round(2)
# st.write("Total number of missing values:",avgmiss)
# st.write(dfnull)
#

!streamlit run app.py & npx localtunnel --port 8501